library(tidyverse)
library(quantmod)
# datos<-read_csv("/home/andresfaral/Downloads/all_stock_data.csv")
# dim(datos)
# tabla<-table(datos$Ticker)
# maximo<-max(tabla)
# tickers<-names(tabla[tabla==maximo])
# datos.filt<-datos %>% filter(Ticker %in% tickers)
# datos.filt
# save(datos.filt,file="stock_comp")
# Cargo datos de Empresas con la historia COMPLETA
load(file="/Users/anapa/OneDrive/Escritorio/facu/problemas/stock_comp")
datos.filt
View(datos.filt)
library(dplyr)
library(TTR)  # o library(quantmod), ya que EMA viene de ahí también
library(purrr)
# Asegurarse de que los datos estén ordenados por Ticker y Date
datos.filt <- datos.filt %>%
arrange(Ticker, Date)
# Función para calcular EMA(50) y EMA(200)
calcular_emas <- function(df) {
df$EMA_50 <- EMA(df$Close, n = 50)
df$EMA_200 <- EMA(df$Close, n = 200)
return(df)
}
# Aplicar la función a cada grupo (ticker)
datos.ema <- datos.filt %>%
group_by(Ticker) %>%
group_modify(~calcular_emas(.x)) %>%
ungroup()
View(datos.ema)
# Load necessary library
library(xts)
# Example data (assuming df is your data frame)
datos.filt2$Date <- as.Date(datos.filt2$Date)  # Convert Date column to Date type
View(datos.ema)
library(dplyr)
library(TTR)  # o library(quantmod), ya que EMA viene de ahí también
library(purrr)
# Asegurarse de que los datos estén ordenados por Ticker y Date
datos.filt <- datos.filt %>%
arrange(Ticker, Date)
# Función para calcular EMA(50) y EMA(200)
calcular_emas <- function(df) {
df$EMA_50 <- EMA(df$Close, n = 50)
df$EMA_200 <- EMA(df$Close, n = 200)
return(df)
}
# Aplicar la función a cada grupo (ticker)
datos.ema <- datos.filt %>%
group_by(Ticker) %>%
group_modify(~calcular_emas(.x)) %>%
ungroup()
datos.ema
# Load necessary library
library(xts)
# Example data (assuming df is your data frame)
datos.filt$Date <- as.Date(datos.filt$Date)  # Convert Date column to Date type
# Convert to xts object (excluding non-numeric columns)
df_xts <- xts(datos.filt2[, -c(1,2)], order.by = datos.filt2$Date)
# Load necessary library
library(xts)
# Example data (assuming df is your data frame)
datos.filt$Date <- as.Date(datos.filt$Date)  # Convert Date column to Date type
# Convert to xts object (excluding non-numeric columns)
df_xts <- xts(datos.filt[, -c(1,2)], order.by = datos.filt2$Date)
# Load necessary library
library(xts)
# Example data (assuming df is your data frame)
datos.filt$Date <- as.Date(datos.filt$Date)  # Convert Date column to Date type
# Convert to xts object (excluding non-numeric columns)
df_xts <- xts(datos.filt[, -c(1,2)], order.by = datos.filt$Date)
# View the xts object
print(df_xts)
# Load necessary library
library(xts)
# Example data (assuming df is your data frame)
datos.filt$Date <- as.Date(datos.filt$Date)  # Convert Date column to Date type
# Convert to xts object (excluding non-numeric columns)
df_ema <- xts(datos.filt[, -c(1,2)], order.by = datos.filt$Date)
# View the xts object
print(df_ema)
# Load necessary library
library(xts)
# Example data (assuming df is your data frame)
datos.ema$Date <- as.Date(datos.filt$Date)  # Convert Date column to Date type
# Convert to xts object (excluding non-numeric columns)
df_ema <- xts(datos.ema[, -c(1,2)])
View(datos.ema)
emadf <- datos.ema %>%
select(Date, Ticker, Close, EMA_50, EMA_200) %>%
filter(!is.na(EMA_50), !is.na(EMA_200)) %>%
group_by(Ticker) %>%
arrange(Date) %>%
mutate(
ema50may = EMA_50 > EMA_200,
cross = ifelse(ema50may != lag(ema50may),
ifelse(ema50may == TRUE, 1, -1),
0)
) %>%
ungroup()
View(emadf)
emadf <- datos.ema %>%
select(Date, Ticker, Close, EMA_50, EMA_200) %>%
filter(!is.na(EMA_50), !is.na(EMA_200)) %>%
arrange(Ticker, Date) %>%
mutate(
ema50may = EMA_50 > EMA_200,
cross = ifelse(ema50may != lag(ema50may),
ifelse(ema50may == TRUE, 1, -1),
0)
) %>%
ungroup()
View(emadf)
emadf <- datos.ema %>%
select(Date, Ticker, Close, EMA_50, EMA_200) %>%
filter(!is.na(EMA_50), !is.na(EMA_200)) %>%
arrange(Ticker, Date) %>%
group_by(Ticker) %>%
mutate(
ema50may = EMA_50 > EMA_200,
cross = ifelse(ema50may != lag(ema50may),
ifelse(ema50may == TRUE, 1, -1),
0),
# Agregar NA si el ticker cambia respecto al anterior
cross = ifelse(Ticker != lag(Ticker), NA, cross)
) %>%
ungroup()
View(emadf)
emadf <- datos.ema %>%
select(Date, Ticker, Close, EMA_50, EMA_200) %>%
filter(!is.na(EMA_50), !is.na(EMA_200)) %>%
arrange(Ticker, Date) %>%
group_by(Ticker) %>%
mutate(
ema50may = EMA_50 > EMA_200,
cross = ifelse(ema50may != lag(ema50may),
ifelse(ema50may == TRUE, 1, -1),
0),
# Agregar NA si el ticker cambia respecto al anterior
cross = ifelse(Ticker != lag(Ticker), NA, cross)
) %>%
ungroup()
emadf
simular_estrategia <- function(df) {
df <- df %>%
filter(!is.na(Close), !is.na(cross)) %>%
arrange(Date)
if (nrow(df) == 0) return(NULL)  # evitar errores
initial_state <- list(cash = 10000, stocks = 0, saldo = 10000)
sim_list <- purrr::accumulate(
1:nrow(df),
.init = initial_state,
.f = function(state, i) {
row <- df[i, ]
new_state <- state
if (!is.na(row$cross)) {
if (row$cross == 1) {
# Golden Cross: Comprar
new_state$stocks <- state$cash / row$Close
new_state$cash <- 0
} else if (row$cross == -1) {
# Death Cross: Vender
new_state$cash <- state$stocks * row$Close
new_state$stocks <- 0
}
}
new_state$saldo <- new_state$cash + new_state$stocks * row$Close
return(new_state)
}
)
sim_df <- bind_rows(sim_list[-1])  # quitar estado inicial
df_result <- bind_cols(df, sim_df)
return(df_result)
}
# Dividir el dataframe por ticker
tickers_split <- emadf %>%
group_by(Ticker) %>%
group_split()
# Aplicar la simulación a cada ticker
resultados_por_ticker <- lapply(tickers_split, simular_estrategia)
