increase_nd = ifelse(is.na(lead(Close)), FALSE, Close < lead(Close)),
porc_diff_nd = ifelse(is.na(lead(Close)), 0, (lead(Close) - Close)/Close)
)
datos.filt.dragon <- datos.filt.doji %>%
filter(dragonfly == 1)
datos.filt.grave <- datos.filt.doji %>%
filter(gravestone == 1)
# Calcular proporciones generales
p_pob_increase2 <- sum(datos.filt.doji$increase_nd) / nrow(datos.filt.doji)
p_pob_decrease2 <- 1 - p_pob_increase2
# Número de observaciones en cada subconjunto
n_dragon2 <- nrow(datos.filt.dragon)
n_grave2 <- nrow(datos.filt.grave)
# Casos donde el precio aumentó después de un Dragonfly Doji
x_dragon2 <- sum(datos.filt.dragon$increase_nd)
# Casos donde el precio disminuyó después de un Gravestone Doji
x_grave2 <- sum(datos.filt.grave$increase_nd)
# Prueba de proporciones para Dragonfly Doji
test_dragon2 <- prop.test(x_dragon2, n_dragon2, p = p_pob_increase2, alternative = "two.sided")
# Prueba de proporciones para Gravestone Doji
test_grave2 <- prop.test(n_grave2 - x_grave2, n_grave2, p = p_pob_decrease2, alternative = "two.sided")
# Mostrar resultados
test_dragon2
test_grave2
# Calcular la media poblacional general
pob_mean <- mean(datos.filt.doji$porc_diff_nd)
# Prueba t para Dragonfly Doji
test_dragon3 <- t.test(datos.filt.dragon$porc_diff_nd,
mu = pob_mean,
alternative = "two.sided")
# Prueba t para Gravestone Doji
test_grave3 <- t.test(datos.filt.grave$porc_diff_nd,
mu = pob_mean,
alternative = "two.sided")
# Mostrar resultados
test_dragon3
test_grave3
# Load necessary library
library(xts)
# Example data (assuming df is your data frame)
datos.filt2$Date <- as.Date(datos.filt2$Date)  # Convert Date column to Date type
# Convert to xts object (excluding non-numeric columns)
df_xts <- xts(datos.filt2[, -c(1,2)], order.by = datos.filt2$Date)
# View the xts object
print(df_xts)
macd50 <- EMA(df_xts$Close, 50)
macd200 <- EMA(df_xts$Close, 200)
macd50
macd200
#resta de los dos
library(xts)
macddf <- data.frame(
Date = index(macd50),
ema50 = coredata(macd50),
ema200 = coredata(macd200)
)
macddf <- macddf %>%
mutate(ema50may = EMA - EMA.1 > 0,
cross = ifelse(ema50may != lead(ema50may),ifelse(ema50may == TRUE, -1, 1) , 0)) %>%
left_join(datos.filt2, by = "Date")
macddf_cross <- macddf %>%
filter(cross != 0)
golden <- count(macddf_cross, cross == 1)
macddf_valid <- macddf %>%
filter(!is.na(Close), !is.na(cross))
initial_state <- list(
cash = 10000,
stocks = 0,
saldo = 10000
)
# Acumulador paso a paso
sim_list <- accumulate(
1:nrow(macddf_valid),
.init = initial_state,
.f = function(state, i) {
row <- macddf_valid[i, ]
new_state <- state
if (!is.na(row$cross)) {
if (row$cross == 1) {
# Golden Cross → Comprar con todo el cash
new_state$stocks <- state$cash / row$Close
new_state$cash <- 0
} else if (row$cross == -1) {
# Death Cross → Vender todo
new_state$cash <- state$stocks * row$Close
new_state$stocks <- 0
}
}
# Recalcular el saldo total
new_state$saldo <- new_state$cash + new_state$stocks * row$Close
return(new_state)
}
)
# Convertir lista de estados a data frame
sim_df <- bind_rows(sim_list[-1])  # sacar .init
macddf_sim <- bind_cols(macddf_valid, sim_df)
n <- nrow(macddf_valid)
macddf_valid$azar <- 0
# Dividir en bloques
bloques <- floor(n / 75)
# Elegir una posición aleatoria dentro de cada bloque
idx_1 <- sapply(0:(75 - 1), function(i) {
bloque_inicio <- i * bloques + 1
bloque_fin <- min((i + 1) * bloques, n)
sample(bloque_inicio:bloque_fin, 1)
})
# Asignar los 1
macddf_valid$azar[idx_1] <- 1
sim_list_aux <- accumulate(
1:nrow(macddf_valid),
.init = initial_state,
.f = function(state, i) {
row <- macddf_valid[i, ]
new_state <- state
if (!is.na(row$azar)) {
if (row$azar == 1) {
if(state$stocks == 0){
new_state$stocks <- state$cash / row$Close
new_state$cash <- 0
}
else if(state$stocks != 0){
new_state$cash <- state$stocks * row$Close
new_state$stocks <- 0
}
}
}
# Recalcular el saldo total
new_state$saldo <- new_state$cash + new_state$stocks * row$Close
return(new_state)
}
)
# Convertir lista de estados a data frame
sim_df_aux <- bind_rows(sim_list_aux[-1])  # sacar .init
macddf_sim_azar <- bind_cols(macddf_valid, sim_df_aux)
library(purrr)
library(dplyr)
# Lista para guardar los resultados finales de saldo
resultados <- numeric(100)
# Loop de 100 repeticiones
for (k in 1:100) {
# Paso 1: generar señales azarosas distribuidas
n <- nrow(macddf_valid)
macddf_valid$azar <- 0
bloques <- floor(n / 75)
idx_1 <- sapply(0:(75 - 1), function(i) {
bloque_inicio <- i * bloques + 1
bloque_fin <- min((i + 1) * bloques, n)
sample(bloque_inicio:bloque_fin, 1)
})
macddf_valid$azar[idx_1] <- 1
# Paso 2: correr simulación con accumulate
initial_state <- list(stocks = 0, cash = 10000, saldo = 10000)
sim_list_aux <- accumulate(
1:nrow(macddf_valid),
.init = initial_state,
.f = function(state, i) {
row <- macddf_valid[i, ]
new_state <- state
if (!is.na(row$azar) && row$azar == 1) {
if (state$stocks == 0) {
new_state$stocks <- state$cash / row$Close
new_state$cash <- 0
} else {
new_state$cash <- state$cash + state$stocks * row$Close
new_state$stocks <- 0
}
}
new_state$saldo <- new_state$cash + new_state$stocks * row$Close
return(new_state)
}
)
sim_df_aux <- bind_rows(sim_list_aux[-1])
# Paso 3: guardar el último saldo
resultados[k] <- sim_df_aux$saldo[nrow(sim_df_aux)]
}
# Ver resultados
resultados
summary(resultados)
hist(resultados,
breaks = 100,
col = "skyblue",
border = "white",
main = "Histograma del saldo final en 30 simulaciones aleatorias",
xlab = "Saldo final",
ylab = "Frecuencia")
# Línea del promedio
abline(v = mean(resultados), col = "red", lwd = 2, lty = 2)
legend("topright", legend = paste("Media =", round(mean(resultados), 2)),
col = "red", lwd = 2, lty = 2, bty = "n")
saldo_estrategia <- macddf_sim$saldo[nrow(macddf_sim)]
t.test(resultados, mu = saldo_estrategia, alternative = "less")
library(dplyr)
library(TTR)  # o library(quantmod), ya que EMA viene de ahí también
library(purrr)
# Asegurarse de que los datos estén ordenados por Ticker y Date
datos.filt <- datos.filt %>%
arrange(Ticker, Date)
# Función para calcular EMA(50) y EMA(200)
calcular_emas <- function(df) {
df$EMA_50 <- EMA(df$Close, n = 50)
df$EMA_200 <- EMA(df$Close, n = 200)
return(df)
}
# Aplicar la función a cada grupo (ticker)
datos.ema <- datos.filt %>%
group_by(Ticker) %>%
group_modify(~calcular_emas(.x)) %>%
ungroup()
datos.ema
emadf <- datos.ema %>%
select(Date, Ticker, Close, EMA_50, EMA_200) %>%
filter(!is.na(EMA_50), !is.na(EMA_200)) %>%
arrange(Ticker, Date) %>%
group_by(Ticker) %>%
mutate(
ema50may = EMA_50 > EMA_200,
cross = ifelse(ema50may != lag(ema50may),
ifelse(ema50may == TRUE, 1, -1),
0),
# Agregar NA si el ticker cambia respecto al anterior
cross = ifelse(Ticker != lag(Ticker), NA, cross)
) %>%
ungroup()
emadf
simular_estrategia <- function(df) {
df <- df %>%
filter(!is.na(Close), !is.na(cross)) %>%
arrange(Date)
if (nrow(df) == 0) return(NULL)  # evitar errores
initial_state <- list(cash = 10000, stocks = 0, saldo = 10000)
sim_list <- purrr::accumulate(
1:nrow(df),
.init = initial_state,
.f = function(state, i) {
row <- df[i, ]
new_state <- state
if (!is.na(row$cross)) {
if (row$cross == 1) {
# Golden Cross: Comprar
new_state$stocks <- state$cash / row$Close
new_state$cash <- 0
} else if (row$cross == -1) {
# Death Cross: Vender
new_state$cash <- state$cash + state$stocks * row$Close
new_state$stocks <- 0
}
}
new_state$saldo <- new_state$cash + new_state$stocks * row$Close
return(new_state)
}
)
sim_df <- bind_rows(sim_list[-1])  # quitar estado inicial
df_result <- bind_cols(df, sim_df)
return(df_result)
}
# Dividir el dataframe por ticker
tickers_split <- emadf %>%
group_by(Ticker) %>%
group_split()
# Aplicar la simulación a cada ticker
resultados_por_ticker <- lapply(tickers_split, simular_estrategia)
# Unir todos los resultados en un único dataframe
resultados_finales <- bind_rows(resultados_por_ticker)
saldo_final_por_ticker <- resultados_finales %>%
group_by(Ticker) %>%
filter(!is.na(saldo)) %>%
slice_tail(n = 1) %>%
select(Ticker, Date, saldo)
print(saldo_final_por_ticker)
simular_estrategia_azar <- function(df, n_senales = 75) {
df <- df %>%
filter(!is.na(Close)) %>%
arrange(Date)
n <- nrow(df)
if (n < n_senales) return(NULL)
# Inicializar columna de azar
df$azar <- 0
# Crear señales aleatorias distribuidas
bloques <- floor(n / n_senales)
idx_1 <- sapply(0:(n_senales - 1), function(i) {
bloque_inicio <- i * bloques + 1
bloque_fin <- min((i + 1) * bloques, n)
sample(bloque_inicio:bloque_fin, 1)
})
df$azar[idx_1] <- 1
df_ultimas_filas <- df %>%
slice_tail(n = 1) %>%
ungroup()
df <- df %>%
filter(azar == 1)
df <- bind_rows(df, df_ultimas_filas) %>%
distinct(Date, .keep_all = TRUE) %>%
arrange(Date)
n <- nrow(df)
# Simulación
initial_state <- list(cash = 10000, stocks = 0, saldo = 10000)
sim_list <- purrr::accumulate(
1:n,
.init = initial_state,
.f = function(state, i) {
row <- df[i, ]
new_state <- state
if (state$stocks == 0) {
new_state$stocks <- state$cash / row$Close
new_state$cash <- 0
} else {
new_state$cash <- state$cash + state$stocks * row$Close
new_state$stocks <- 0
}
new_state$saldo <- new_state$cash + new_state$stocks * row$Close
return(new_state)
}
)
sim_df <- bind_rows(sim_list[-1])
df_result <- bind_cols(df, sim_df)
return(df_result)
}
library(progress)
n_repeticiones <- 100
lista_saldos_finales <- list()
# Crear barra de progreso
pb <- progress_bar$new(
format = "[:bar] :percent | Iteración :current/:total | Tiempo restante: :eta",
total = n_repeticiones,
clear = FALSE,
width = 60
)
for (i in 1:n_repeticiones) {
pb$tick()  # Actualizar barra
# Simular estrategia para todos los tickers
resultados_iteracion <- lapply(tickers_split, simular_estrategia_azar) %>%
bind_rows()
# Extraer saldos finales
lista_saldos_finales[[i]] <- resultados_iteracion %>%
group_by(Ticker) %>%
filter(!is.na(saldo)) %>%
slice_tail(n = 1) %>%
select(Ticker, Date, saldo)
}
resultados_saldos_finales_azar <- bind_rows(lista_saldos_finales)
resultados_saldos_finales_azar
# Paso 1: Calcular el promedio de cada ticker en las simulaciones
resultado_promedios <- resultados_saldos_finales_azar %>%
group_by(Ticker) %>%
summarise(saldo_azar = mean(saldo))
# Paso 2: Unir con el saldo de la estrategia
comparacion <- saldo_final_por_ticker %>%
select(Ticker, saldo_estrategia = saldo) %>%
inner_join(resultado_promedios, by = "Ticker")
# Paso 3: Test t pareado (una cola)
t.test(comparacion$saldo_estrategia, comparacion$saldo_azar,
paired = TRUE,
alternative = "greater")
calcular_saldo_final_ema <- function(df=datos.filt, ema1, ema2) {
calcular_emas <- function(df, ema1, ema2) {
df %>%
mutate(
EMA1 = EMA(Close, n = ema1),
EMA2 = EMA(Close, n = ema2)
)
}
# Uso:
df <- df %>%
group_by(Ticker) %>%
calcular_emas(ema1, ema2) %>%
ungroup()
df <- df %>%
select(Date, Ticker, Close, EMA1, EMA2) %>%
filter(!is.na(EMA1), !is.na(EMA2)) %>%
arrange(Ticker, Date) %>%
group_by(Ticker) %>%
mutate(
ema1may = EMA1 > EMA2,
cross = ifelse(ema1may != lag(ema1may),
ifelse(ema1may == TRUE, 1, -1),
0),
# Agregar NA si el ticker cambia respecto al anterior
cross = ifelse(Ticker != lag(Ticker), NA, cross)
) %>%
ungroup()
df_ultimas_filas <- df %>%
group_by(Ticker) %>%
slice_tail(n = 1) %>%
ungroup()
df <- df %>%
filter(cross != 0)
df <- bind_rows(df, df_ultimas_filas) %>%
distinct(Ticker, Date, .keep_all = TRUE) %>%
arrange(Ticker, Date)
df_split <- df %>%
group_by(Ticker) %>%
group_split()
df_result <- lapply(df_split, simular_estrategia) %>%
bind_rows() %>%
group_by(Ticker) %>%
filter(!is.na(saldo)) %>%
slice_tail(n = 1)
return(mean(df_result$saldo))
}
library(progress)
library(reshape2)
saldo_base <- mean(saldo_final_por_ticker$saldo)
ema1 <- seq(10, 250, by = 10)
ema2 <- seq(150, 400, by = 10)
# Crear matriz vacía
matriz_resultados <- matrix(
nrow = length(ema1),
ncol = length(ema2),
dimnames = list(paste0("EMA1_", ema1), paste0("EMA2_", ema2))
)
pb <- progress_bar$new(
format = "[:bar] :percent | Fila: :current/:total | Tiempo: :elapsedfull",
total = length(ema1) * length(ema2),  # Total de iteraciones
clear = FALSE,
width = 60
)
# Llenar la matriz con mapply
for (i in seq_along(ema1)) {
for (j in seq_along(ema2)) {
if (ema1[i] >= ema2[j]) {
matriz_resultados[i, j] <- NA
} else {
matriz_resultados[i, j] <- calcular_saldo_final_ema(datos.filt, ema1[i], ema2[j])/saldo_base
}
pb$tick()
}
}
library(plotly)
plot_ly(
z = ~matriz_resultados,
x = colnames(matriz_resultados),
y = rownames(matriz_resultados),
colorscale = list(
c(0, "blue"),    # Mínimo: azul
c(0.5, "white"), # Medio: blanco (ajusta el 0.5 según tus datos)
c(1, "red")      # Máximo: rojo
),
type = "heatmap"
) %>%
layout(title = "Promedio en base a EMAs")
calcular_operaciones_ema <- function(df=datos.filt, ema1, ema2) {
calcular_emas <- function(df, ema1, ema2) {
df %>%
mutate(
EMA1 = EMA(Close, n = ema1),
EMA2 = EMA(Close, n = ema2)
)
}
# Uso:
df <- df %>%
group_by(Ticker) %>%
calcular_emas(ema1, ema2) %>%
ungroup()
df <- df %>%
select(Date, Ticker, Close, EMA1, EMA2) %>%
filter(!is.na(EMA1), !is.na(EMA2)) %>%
arrange(Ticker, Date) %>%
group_by(Ticker) %>%
mutate(
ema1may = EMA1 > EMA2,
cross = ifelse(ema1may != lag(ema1may),
ifelse(ema1may == TRUE, 1, -1),
0),
# Agregar NA si el ticker cambia respecto al anterior
cross = ifelse(Ticker != lag(Ticker), NA, cross)
) %>%
ungroup()
df_ultimas_filas <- df %>%
group_by(Ticker) %>%
slice_tail(n = 1) %>%
ungroup()
df <- df %>%
filter(cross != 0)
return(nrow(df)/29)
}
ema1 <- seq(40, 250, by = 10)
ema2 <- seq(150, 400, by = 10)
# Crear matriz vacía
matriz_resultados2 <- matrix(
nrow = length(ema1),
ncol = length(ema2),
dimnames = list(paste0("EMA1_", ema1), paste0("EMA2_", ema2))
)
pb <- progress_bar$new(
format = "[:bar] :percent | Fila: :current/:total | Tiempo: :elapsedfull",
total = length(ema1) * length(ema2),  # Total de iteraciones
clear = FALSE,
width = 60
)
# Llenar la matriz con mapply
for (i in seq_along(ema1)) {
for (j in seq_along(ema2)) {
if (ema1[i] >= ema2[j]) {
matriz_resultados2[i, j] <- NA
} else {
matriz_resultados2[i, j] <- calcular_operaciones_ema(datos.filt, ema1[i], ema2[j])
}
pb$tick()
}
}
plot_ly(
z = ~matriz_resultados2,
x = colnames(matriz_resultados2),
y = rownames(matriz_resultados2),
colorscale = list(
c(0, "blue"),    # Mínimo: azul
c(0.5, "white"), # Medio: blanco (ajusta el 0.5 según tus datos)
c(1, "red")      # Máximo: rojo
),
type = "heatmap"
) %>%
layout(title = "Operaciones promedio en base a EMAs")
